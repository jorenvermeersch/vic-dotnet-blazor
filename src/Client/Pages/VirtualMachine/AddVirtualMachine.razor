@page "/virtual-machine/add"
@layout NoGlobalSearchLayout
@namespace Shared
@using Host
@using Shared
@using Specification
@using customer
@using Account
@using System.ComponentModel.DataAnnotations
@using VirtualMachine
@using Client.Validation
@inject IVirtualMachineService virtualMachineService
@inject IHostService hostService
@inject ICustomerService customerService
@inject IAccountService accountService
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Master, Administrator")]

<PageTitle>Virtuele Machine Toevoegen</PageTitle>


<EditForm OnValidSubmit="@HandleValidSubmit" Model="@VirtualMachine">
    <FluentValidationValidator TValidator="VirtualMachineValidation" />
    <div class="context-menu">
        <span class="context-menu-label">
            <TitlePage IconString="desktop" Type="Virtuele Machine" Mutation="Toevoegen" />
        </span>
        <button type="submit">Toevoegen</button>
        @*<Button Text="Machine toevoegen" OnClick="@HandleOnValidSubmit" />*@
        @*<Button Text="Machine toevoegen"/>*@
    </div>
    <div class="three-column-layout">
        <div class="one-third">
            <Title Text="Configuratie" />
            <RequiredInput Type="@Input.InputType.TEXT" Label="Naam" @bind-Value="VirtualMachine.Name" For="@(()=>VirtualMachine.Name)" />
            <RequiredInput Type="@Input.InputType.TEXT" Label="FQDN" @bind-Value="VirtualMachine.FQDN" For="@(()=>VirtualMachine.FQDN)" />
            <RequiredInput Type="@Input.InputType.SELECT" Label="Mode" Items="@Modes" @bind-Value="VirtualMachine.Mode" For="@(()=>VirtualMachine.Mode)" />
            <RequiredInput Type="@Input.InputType.SELECT" Label="Template" Items="@Templates" @bind-Value="VirtualMachine.Template" For="@(()=>VirtualMachine.Template)" />


            <RequiredInput Type="@Input.InputType.TEXT" Label="Reden" @bind-Value="@VirtualMachine.Reason" For="@(()=>VirtualMachine.Reason)" />
            <RequiredInput Type="@Input.InputType.SELECT" Label="Status" Items="@Statuses" @bind-Value="VirtualMachine.Status" For="@(()=>VirtualMachine.Status)" />
            
            <EditForm Model="@Port" Context="PortContext" OnValidSubmit="@AddPortToList">
                <Title Text="Poorten" />
                <div class="input-container">
                     <select @bind="SelectedPort" class="input" style="@_customcss" type="text" placeholder="geef een poort in">
                        <option value="" disabled selected hidden>geef een poort in </option>
                        @foreach (var item in Options)
                        {
                            <option value="@item">@item</option>
                        }
                    </select>
                </div>
                <button type="submit"> Poort toevoegen</button>
            </EditForm>

            <div class="buttonList">
                @foreach(var item in _ports){
                    <PortButton Text="@item" OnClick="@(() => RemovePortFromList(item))" />
                }
            </div>

            <CustomCheckbox Label="VPN"></CustomCheckbox>

            

       

            <Title Text="Specificaties" />
            <RequiredInput Type="@Input.InputType.SELECT" Label="Host" Items="@Hosts" @bind-Value="Host" For="@(()=>Host)" />
            <CustomInputNumber Label="vCPUs" @bind-Value="@VirtualMachine.Specifications.Processors" For="@(()=>VirtualMachine.Specifications.Processors)" Required=true />
            <CustomInputNumber Label="Geheugen" @bind-Value="@VirtualMachine.Specifications.Memory" For="@(()=>VirtualMachine.Specifications.Memory)" Required=true />
            <CustomInputNumber Label="Opslag" @bind-Value="@VirtualMachine.Specifications.Storage" For="@(()=>VirtualMachine.Specifications.Storage)" Required=true />
        </div>
        <div class="one-third">
            <Title Text="Beschikbaarheid" />
            <CustomInputDate Label="Datum van aanvraag" @bind-Value="@VirtualMachine.ApplicationDate" For="@(()=>VirtualMachine.ApplicationDate)" Required=true />
            <CustomInputDate Label="Startdatum" @bind-Value="@VirtualMachine.StartDate" For="@(()=>VirtualMachine.StartDate)" Required=true />
            <CustomInputDate Label="Einddatum" @bind-Value="@VirtualMachine.EndDate" For="@(()=>VirtualMachine.EndDate)" Required=true />
            <!--
            <AvailabilityOptionSelect customCss="@_customcss" />
            <div style="display:flex; width: 100%; justify-content: end; margin: var(--padding-sm) 0px">
                <Button Text="Toevoegen" />
            </div>
            <AvailabilityOption DayOfWeek="Availability.Wednesday" PartOfDay="PartOfDay.FullDay" customCss="@_customcss" />
            <AvailabilityOption DayOfWeek="Availability.Thursday" PartOfDay="PartOfDay.FullDay" customCss="@_customcss" />
            <AvailabilityOption DayOfWeek="Availability.Friday" PartOfDay="PartOfDay.FullDay" customCss="@_customcss" />
            -->
            <Title Text="Back-ups" />
            <RequiredInput PlaceHolder="" Items="@Backups" Type="@Input.InputType.SELECT" Label="Regelmaat" @bind-Value="@VirtualMachine.BackupFrequenty" For="@(()=>VirtualMachine.BackupFrequenty)" />
        </div>

        <div class="one-third">
            <Title Text="Gebruikers"></Title>
            <RequiredInput Type="@Input.InputType.SELECT" Label="Aanvrager" Items="@Customers" @bind-Value="@VirtualMachine.Requester" For="@(()=>VirtualMachine.Requester)" />
            <RequiredInput Type="@Input.InputType.SELECT" Label="Gebruiker" Items="@Customers" @bind-Value="@VirtualMachine.User" For="@(()=>VirtualMachine.User)" />

            <Title Text="Verantwoordelijke"></Title>
            <RequiredInput Type="@Input.InputType.SELECT" Label="Verantwoordelijke" Items="@Accounts" @bind-Value="@VirtualMachine.Account" For="@(()=>VirtualMachine.Account)" />


            @*            <ChildContent  Context="" />
            <GenericSelect Items="@Account">

            @context

            </GenericSelect>
            *@
            <Title Text="Logingegevens" />
            <EditForm Context="CredentialContext" OnValidSubmit="@AddCredential" Model="@newCredential">
                <FluentValidationValidator TValidator="CredentialValidation" />
                <AddInput Type="Input.InputType.TEXT" Label="Username" @bind-Value="newCredential.Username" For="@(()=> newCredential.Username)" Margin="true" />
                <AddInput Type="Input.InputType.TEXT" Label="Role" @bind-Value="newCredential.Role" For="@(()=> newCredential.Role)" Margin="true" />
                <AddInput Type="Input.InputType.TEXT" Label="PasswordHash" @bind-Value="newCredential.PasswordHash" For="@(()=> newCredential.PasswordHash)" Margin="true" />
                <button type="submit">Toevoegen</button>
            </EditForm>


            @foreach (CredentialDto c in credentialList)
            {
                Dictionary<string, string> entry = new() { { "Username", c.Username }, { "Role", c.Role }, { "Passwordhash", c.PasswordHash } };
                <DataCard Entries="@entry" customCss="@_customcss" />
            }


        </div>


    </div>
</EditForm>




@code {
    private EditForm? Editform { get; set; } = new();
    private VirtualMachineDto.Create VirtualMachine { get; set; } = new();
    private PortDto Port { get; set; } = new();
    private SpecificationDto Specifications;
    private string SelectedPort{ get; set; }
    private IEnumerable<string> SelectedPorts { get; set; } = new HashSet<string>(){"HTTPS"};


    // Credentials
    private List<CredentialDto> credentialList = new();
    private CredentialDto? newCredential = new();

    private async void HandleValidSubmit()
    {
        VirtualMachine.Credentials = credentialList;
        Console.WriteLine("Successful");
        Console.WriteLine(VirtualMachine.Credentials[0].Username);

        VirtualMachineDto.Details newVirtualMachine = await virtualMachineService.Add(VirtualMachine);
        Navigation.NavigateTo("virtual-machine/" + newVirtualMachine.Id);
    }


    private void AddCredential()
    {
        credentialList.Add(newCredential);
        newCredential = new();
    }

    private string _customcss = "background-color: white";

    private HashSet<string> _ports = new();
    public List<string> Options { get; set; } = new() { "HTTP", "HTTPS", "SSH" };
    public List<string> Backups { get; set; } = new() { "Dagelijks", "Wekelijks", "Maandelijks", "Jaarlijks" };
    public List<string> Modes { get; set; } = new() { "SAAS", "PAAS", "IAAS" };
    public List<string> Templates { get; set; } = new() { "Geen Template", "AI" };
    public List<string> Statuses { get; set; } = new() { "Aanvraag", "In verwerking", "Afgehandeld" };
    private List<string>? Hosts { get; set; }
    private List<string>? Customers { get; set; }
    private List<string>? Accounts { get; set; } = new();
    private Dictionary<int, Dictionary<string, string>> _entries = new();

    private string Requester { get; set; }
    private string User { get; set; }
    private string Host { get; set; }
    private string Account { get; set; }


    protected override void OnInitialized()
    {
        Specifications = VirtualMachine.Specifications;

        _entries.Add(0, new() { { "Gebruikernaam", "admin" }, { "Rol", "Admin" } });
        _entries.Add(1, new() { { "Gebruikernaam", "admin" }, { "Rol", "User" } });
    }
    protected override async Task OnInitializedAsync()
    {
        IEnumerable<HostDto.Index> hosts = await hostService.GetIndexAsync(0);
        Hosts = hosts.Select(h => string.Concat(h.Id, " - ", h.Name)).ToList();
        IEnumerable<CustomerDto.Index> customers = await customerService.GetIndexAsync(0);
        Customers = customers.Select(c => string.Concat(c.Id, " - ", c.Name)).ToList();
        IEnumerable<AccountDto.Index> accounts = await accountService.GetIndexAsync(0);
        Accounts = accounts.Select(c => string.Concat(c.Id, " - ", c.Firstname, " ", c.Lastname, " - ", c.Role)).ToList();
    }


    void ClickHandler(int id)
    {
        _entries.Remove(id);
    }

    public void AddPortToList()
    {
        _ports.Add(SelectedPort);
    }

    public void RemovePortFromList(string value)
    {
        _ports.Remove(value);
    }
}
