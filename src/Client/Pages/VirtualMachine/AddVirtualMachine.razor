@page "/virtual-machine/add"
@layout NoGlobalSearchLayout 
@namespace Shared
@using Host
@using Shared
@using Specification
@using customer
@using Account
@using System.ComponentModel.DataAnnotations
@using VirtualMachine
@inject IVirtualMachineService virtualMachineService
@inject IHostService hostService
@inject ICustomerService customerService
@inject IAccountService accountService
@inject NavigationManager Navigation
@attribute [Authorize(Roles = "Master, Administrator")]

<PageTitle>Virtuele Machine Toevoegen</PageTitle>

<EditForm  @ref="Editform" Model="@VirtualMachine">
    <DataAnnotationsValidator/>
    <div class="context-menu">
         <Button Text="Machine toevoegen" OnClick="@HandleOnValidSubmit" />
    </div>
    <div class="three-column-layout">
        <div class="one-third">
            <Title Text="Configuratie" />
            <AddInput Type="@Input.InputType.TEXT" Label="Naam" Required="@true" @bind-Value="VirtualMachine.Name" For="@(()=>VirtualMachine.Name)" />
             <AddInput Type="@Input.InputType.TEXT" Label="FQDN" Required="@true" @bind-Value="VirtualMachine.FQDN" For="@(()=>VirtualMachine.FQDN)" />
             <AddInput Type="@Input.InputType.SELECT" Label="Mode" Required="@true" Items="@Modes" @bind-Value="VirtualMachine.Mode" For="@(()=>VirtualMachine.Mode)" />
             <AddInput Type="@Input.InputType.SELECT" Label="Template" Required="@true" Items="@Templates" @bind-Value="VirtualMachine.Template" For="@(()=>VirtualMachine.Template)" />
            
           
            <AddInput Type="@Input.InputType.TEXT" Label="Reden" @bind-Value="@VirtualMachine.Reason" For="@(()=>VirtualMachine.Reason)" />
            <AddInput Type="@Input.InputType.SELECT" Label="Status" Items="@Statuses" @bind-Value="VirtualMachine.Status" For="@(()=>VirtualMachine.Status)" />
                <!--
            <Title Text="Poorten" />
            <AddInput PlaceHolder="Geef een poort in" Items="@Options" Type="@Input.InputType.SELECT" Label="Poort" Action="(value) => AddPortToList(value)" />
            <div class="buttonList">
                @foreach(var item in _ports){
                    <PortButton Text="@item" OnClick="@(() => RemovePortFromList(item))" />
                }
            
            </div>-->

            <Title Text="Specificaties" />
            <AddInput Type="@Input.InputType.SELECT" Label="Host" Items="@Hosts" @bind-Value="Host" For="@(()=>Host)" />
            <CustomInputNumber Label="vCPUs" @bind-Value="VirtualMachine.Specification.Processors" For="@(()=>VirtualMachine.Specification.Processors)" />
               <CustomInputNumber  Label="Geheugen" @bind-Value="VirtualMachine.Specification.Memory" For="@(()=>VirtualMachine.Specification.Memory)" />
               <CustomInputNumber  Label="Opslag" @bind-Value="VirtualMachine.Specification.Storage" For="@(()=>VirtualMachine.Specification.Storage)" />
        </div>
        <div class="one-third">
            <Title Text="Beschikbaarheid" />
            <CustomInputDate Label="Datum van aanvraag" @bind-Value="@VirtualMachine.ApplicationDate" For="@(()=>VirtualMachine.ApplicationDate)"/>

            <CustomInputDate Label="Startdatum" @bind-Value="@VirtualMachine.TimeSpan.StartDate" For="@(()=>VirtualMachine.TimeSpan.StartDate)"/>
            <CustomInputDate Label="Einddatum" @bind-Value="@VirtualMachine.TimeSpan.EndDate" For="@(()=>VirtualMachine.TimeSpan.EndDate)"/>
            <!--
            <AvailabilityOptionSelect customCss="@_customcss" />
            <div style="display:flex; width: 100%; justify-content: end; margin: var(--padding-sm) 0px">
                <Button Text="Toevoegen" />
            </div>
            <AvailabilityOption DayOfWeek="Availability.Wednesday" PartOfDay="PartOfDay.FullDay" customCss="@_customcss" />
            <AvailabilityOption DayOfWeek="Availability.Thursday" PartOfDay="PartOfDay.FullDay" customCss="@_customcss" />
            <AvailabilityOption DayOfWeek="Availability.Friday" PartOfDay="PartOfDay.FullDay" customCss="@_customcss" />
            -->
            <Title Text="Back-ups" />
            <AddInput PlaceHolder="" Items="@Backups" Type="@Input.InputType.SELECT" Label="Regelmaat" @bind-Value="@VirtualMachine.BackupFrequenty" For="@(()=>VirtualMachine.BackupFrequenty)" />
        </div>
 
        <div class="one-third">
            <Title Text="Gebruikers"></Title>
            <AddInput Type="@Input.InputType.SELECT" Label="Aanvrager" Items="@Customers" @bind-Value="@Requester" For="@(()=>Requester)" />
            <AddInput Type="@Input.InputType.SELECT" Label="Gebruiker" Items="@Customers" @bind-Value="@User" For="@(()=>User)" />

            <Title Text="Verantwoordelijke"></Title>
            <AddInput Type="@Input.InputType.SELECT" Label="Verantwoordelijke" Items="@Accounts" @bind-Value="@Account" For="@(()=>Account)" />

            <!--
            <Title Text="Logingegevens" />
            <AddInput Type="@Input.InputType.TEXT" Label="Gebruikersnaam"/>
            <AddInput Type="@Input.InputType.TEXT" Label="Rol" />
            <div style="display:flex; width: 100%; justify-content: end; margin: var(--padding-sm) 0px">
                <Button Text="Toevoegen" />
            </div>

            @foreach(KeyValuePair<int, Dictionary<string, string>> entry in _entries) {
                <DataCard OnClick="() => ClickHandler(entry.Key)" Entries="@entry.Value" customCss="@_customcss" />
            }
            -->
        </div>
        
        
    </div>
</EditForm>




@code {
    private EditForm? Editform { get; set; } = new();
    private VirtualMachineDto.Details VirtualMachine { get; set; } = new();
    private string _customcss = "background-color: white";

    private HashSet<string> _ports = new();
    public List<string> Options { get; set; } = new() { "HTTP", "HTTPS", "SSH" };
    public List<string> Backups { get; set; } = new() { "Dagelijks", "Wekelijks", "Maandelijks", "Jaarlijks" };
    public List<string> Modes { get; set; } = new() { "SAAS", "PAAS", "IAAS" };
    public List<string> Templates { get; set; } = new() { "geen", "AI" };
    public List<string> Statuses { get; set; } = new() { "Aanvraag", "In verwerking", "Afgehandeld" };
    private List<string>? Hosts { get; set; }
    private List<string>? Customers { get; set; }
    private List<string>? Accounts { get; set; } = new();
    private Dictionary<int, Dictionary<string, string>> _entries = new();

    private string Requester { get; set; }
    private string User { get; set; }
    private string Host { get; set; }
    private string Account { get; set; }


    protected override void OnInitialized()
    {
        _entries.Add(0, new() { { "Gebruikernaam", "admin" }, { "Rol", "Admin" } });
        _entries.Add(1, new() { { "Gebruikernaam", "admin" }, { "Rol", "User" } });
    }
    protected override async Task OnInitializedAsync()
    {
        IEnumerable<HostDto.Index> hosts= await hostService.GetIndexAsync(0);
        Hosts = hosts.Select(h => string.Concat(h.Id ," - " , h.Name)).ToList();
        IEnumerable<CustomerDto.Index> customers = await customerService.GetIndexAsync(0);
        Customers = customers.Select(c => string.Concat(c.Id, " - ", c.Name)).ToList();
        IEnumerable<AccountDto.Index> accounts = await accountService.GetIndexAsync();
        Accounts = accounts.Select(c => string.Concat(c.Id, " - ", c.Firstname, " ", c.Lastname, " - ", c.Role)).ToList();
    }


    void ClickHandler(int id)
    {
        _entries.Remove(id);
    }

    public void AddPortToList(string value)
    {
        _ports.Add(value);
    }

    public void RemovePortFromList(string value){
        _ports.Remove(value);
    }

    public async void HandleOnValidSubmit()
    {
        if (Editform.EditContext.Validate())
        {
            var selecteduser = await customerService.GetDetailAsync(long.Parse(User.Split('-')[0].Trim()));
            VirtualMachine.User = new CustomerDto.Index {
                Id=selecteduser.Id,
                Name = selecteduser.ContactPerson.Firstname + " " + selecteduser.ContactPerson.Lastname,
                Email = selecteduser.ContactPerson.Email
            };
            var selectedRequester = await customerService.GetDetailAsync(long.Parse(Requester.Split('-')[0].Trim()));
            VirtualMachine.Requester = new CustomerDto.Index
                {
                    Id = selectedRequester.Id,
                    Name = selectedRequester.ContactPerson.Firstname + " " + selectedRequester.ContactPerson.Lastname,
                    Email = selectedRequester.ContactPerson.Email
                };
            var selectedhost = await hostService.GetDetailAsync(long.Parse(Host.Split('-')[0].Trim()));
            VirtualMachine.Host = new HostDto.Index
                {
                    Id = selectedhost.Id,
                    Name = selectedhost.Name,

                };
            var selectedAccount = await accountService.GetDetailAsync(long.Parse(Account.Split('-')[0].Trim()));
            VirtualMachine.Account = new AccountDto.Index
                {
                    Id = selectedAccount.Id,
                    Firstname = selectedAccount.Firstname,
                    Lastname = selectedAccount.Lastname,
                    Email = selectedAccount.Email,
                    Role = selectedAccount.Role

                };

            var newVirtualMachine = await virtualMachineService.Add(VirtualMachine);
            Navigation.NavigateTo("/virtual-machine/" + newVirtualMachine.Id);
        }
    }
}
