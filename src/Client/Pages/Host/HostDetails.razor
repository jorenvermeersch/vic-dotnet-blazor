@page "/host/{id:long}"
@layout MainLayout
@namespace Shared
@using Host
@using VirtualMachine
@inject IHostService hostService
@inject IVirtualMachineService virtualMachineService
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Host [host name] Details</PageTitle>

<div class="context-menu">
    <div class="context-items" style="display: flex">
        <span style="flex: 1; cursor: pointer; display: flex; gap: 10px" class="small_title" @onclick="NavigateBack">
            <i class="fa-solid fa-arrow-left"></i>
            <span>Terug</span>
        </span>
        <span>
            <Button Text="Beheren" />
        </span>
    </div>
</div>
<div class="three-column-layout">
    <div class="one-third">
        <DataCard Entries="@_server.GetValueOrDefault("name")" />

        <Title Text="Specificaties" />
        <DataCard Entries="@_server.GetValueOrDefault("resources")" />
        <Title Text="Overblevende specificaties" />
        <DataCard Entries="@_server.GetValueOrDefault("remainingResources")" />
    </div>
    <div class="two-thirds">

        <Title Text="Virtuele machines" />
        @if (virtualMachines.Any())
        {
            <div class="two-columns-container">
                <div>
                    @foreach (var vm in virtualMachines.Take(5))
                    {
                        <EntityCard Value=@vm.FQDN Active=@(vm.Status == Status.Requested || vm.Status == Status.InProgress) Href=@string.Concat("virtual-machine/", vm.Id) />
                    }
                </div>
                <div>
                    @foreach (var vm in virtualMachines.Skip(5).Take(5))
                    {
                        <EntityCard Value=@vm.FQDN Active=@(vm.Status == Status.Requested || vm.Status == Status.InProgress) Href=@string.Concat("virtual-machine/", vm.Id) />
                    }
                </div>
                
            </div>


            <PageSelector OnClick="@ClickHandler" NumberOfPages=@totalPages SelectedPage="@selectedPage" />
        }
        else
        {
            <NoVmMsg Type="host"/>
        }
    </div>
</div>


@code {
    private Dictionary<string, Dictionary<string, string>> _server = new();
    [Parameter] public long Id { get; set; }
    private HostDto.Details? host;
    private IEnumerable<VirtualMachineDto.Index> virtualMachines;
    int offset = 0;
    int totalVirtualMachines = 0;
    int totalPages = 0;
    int selectedPage = 1;

    protected override async Task OnInitializedAsync()
    {
        host = await hostService.GetDetailAsync(Id);
        _server.Add("name", new() { { "Naam", host.Name } });
        _server.Add("resources", new() { { "vCPU", host.Specifications.Processors.ToString() }, { "Geheugen", host.Specifications.Memory.ToString() }, { "Opslag", host.Specifications.Storage.ToString() } });
        _server.Add("remainingResources", new() { { "vCPU", host.RemainingResources.Processors.ToString() }, { "Geheugen", host.RemainingResources.Memory.ToString() }, { "Opslag", host.RemainingResources.Storage.ToString() } });
        virtualMachines = await virtualMachineService.GetVirtualMachinesByHostId(host.Id,offset);
        totalVirtualMachines = virtualMachines.Count();
        totalPages = (totalVirtualMachines / 10) + 1;
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("host/list");
    }

    async Task ClickHandler(int pageNr)
    {
        offset = (pageNr - 1) * 10;
        virtualMachines = await virtualMachineService.GetVirtualMachinesByHostId(host.Id, offset);
        selectedPage = pageNr;
    }
}