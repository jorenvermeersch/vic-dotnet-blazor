@page "/"
@attribute [Authorize]
@namespace Shared
@using VirtualMachine
@inject IVirtualMachineService VirtualMachineService
@inject IStringLocalizer<Resource> localizer


<div class="context-menu">

    <AuthorizeView Roles="Master, Administrator">
        <Label Text="Toevoegen" />
    </AuthorizeView>
    <AuthorizeView Roles="Master">
        <Button Text="Account" Href="/account/add" />
    </AuthorizeView>
    <AuthorizeView Roles="Master, Administrator">
        <Button Text="Klant" Href="/customer/add" />
        <Button Href="/virtual-machine/add" Text="Virtuele machine" />
        <Button Href="/host/add" Text="Host" />
    </AuthorizeView>
    
</div>

<div class="three-column-layout">
    <div class="one-third">

        <Title Text="Onafgewerkte virtuele machines" />
        
        @foreach (var vm in virtualMachines)
        {
            <EntityCard Value="@vm.FQDN" Active=@false Href=@string.Concat("virtual-machine/", vm.Id)></EntityCard>
        }

        <PageSelector OnClick="@ClickHandler" NumberOfPages=@totalPages SelectedPage="@selectedPage" />
    </div>
    <div class="two-thirds">
        <Title Text="Verbruik deze week" />
        <div class="two-columns-container">
            <div>
                <Graph Title="Virtuele machines" Unit="Aantal" StartLabel="@_startLabel" EndLabel="@_endLabel"/>
                <Graph Title="Virtuele processoren" Unit="Aantal" StartLabel="@_startLabel" EndLabel="@_endLabel" />
            </div>
            <div>
                <Graph Title="Geheugen" Unit="Aantal" StartLabel="@_startLabel" EndLabel="@_endLabel" />
                <Graph Title="Opslag" Unit="Aantal" StartLabel="@_startLabel" EndLabel="@_endLabel" />
            </div>
            
        </div>
    </div>
</div>

@code {
    string _startLabel = "24/10", _endLabel = "30/10";    

    private List<VirtualMachineDto.Index> virtualMachines = new();
    int offset = 0;
    int totalVirtualMachines = 0;
    int totalPages;
    int selectedPage = 1;

    protected override async Task OnInitializedAsync()
    {
        VirtualMachineResponse.GetIndex response = await VirtualMachineService.GetAllUnfinishedVirtualMachines(new VirtualMachineRequest.GetIndex());
        virtualMachines.AddRange(response.VirtualMachines);
        
        totalVirtualMachines = response.TotalAmount;
        totalPages = (totalVirtualMachines / 10) + 1;
    }

    async Task ClickHandler(int pageNr)
    {
        offset = (pageNr - 1) * 10;
        //virtualMachines = await VirtualMachineService.GetAllUnfinishedVirtualMachines(offset);
        VirtualMachineResponse.GetIndex response = await VirtualMachineService.GetAllUnfinishedVirtualMachines(new VirtualMachineRequest.GetIndex());
        virtualMachines.AddRange(response.VirtualMachines);
        selectedPage = pageNr;
    }
}
