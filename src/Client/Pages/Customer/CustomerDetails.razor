@page "/customer/{id:long}"
@layout MainLayout
@namespace Shared
@using Shared.VirtualMachine
@using Shared.customer
@inject ICustomerService customerService
@inject IVirtualMachineService virtualMachineService
@attribute [Authorize]

<PageTitle>Klant [customer name] Details</PageTitle>

<div class="context-menu">
    <div style="display: flex">
        <span style="flex: 1; cursor: pointer; display: flex; gap: 10px" class="small_title"><i class="fa-solid fa-arrow-left"></i><span>Terug</span></span>
    </div>
</div>
<div class="three-column-layout">
    <div class="one-third">
    <DataCard Entries="@_username" />

    <Title text="Algemeen" />
    <DataCard Entries="@_general" />

    <Title text="Contactgegevens" />
    <DataCard Entries="@_contactInformation" />
        <DataCard Entries="@_backupContactInformation" />
</div>
<div class="one-third">

    <div style="display: flex; align-items: flex-end; height: 50px;">
        <span style="flex: 1">
            <Button Text="Actief" />
        </span>
        <span>
            <Button Text="Beheren" />
        </span>
    </div>

    <Title text="Virtuele machines" />
    @if(virtualMachine.Any()){
        @foreach(var vm in virtualMachine){
            <EntityCard Value=@vm.FQDN Active=@vm.IsActive />
        }
    <PageSelector NumberOfPages="5"/>
    }
    else{
        <p>Geen virtual machines beschikbaar</p>
    }
    
</div>
</div>





@code {
    private CustomerDto.Details? customer;
    private IEnumerable<VirtualMachineDto.Index>? virtualMachine;

    [Parameter] public long Id { get; set; }

    private Dictionary<string, string> _username = new();
    private Dictionary<string, string> _general = new();
    private Dictionary<string, string> _contactInformation = new();
    private Dictionary<string, string> _backupContactInformation = new();

    protected override async Task OnInitializedAsync()
    {
        customer = await customerService.GetDetailAsync(Id);
        virtualMachine = await virtualMachineService.GetVirtualMachinesByUserId(Id);

        _username.Add("Naam", string.Concat(customer.ContactPerson.Firstname, " ", customer.ContactPerson.Lastname));

        if(customer.Type==null){
            _general.Add("Departement", customer.Department);
            _general.Add("Opleiding", customer.Education);
            _general.Add("Type klant", "Intern");
        }else{
            _general.Add("Naam", customer.Name);
            _general.Add("Type", customer.Type);
            _general.Add("Type klant", "Extern");

        }

        _contactInformation.Add("Naam", string.Concat(customer.ContactPerson.Firstname, " ", customer.ContactPerson.Lastname));
        _contactInformation.Add("E-mailadres", customer.ContactPerson.Email);
        _contactInformation.Add("Telefoonnummer", customer.ContactPerson.Phonenumber);

        if(customer.BackupContactPerson!=null){
            _backupContactInformation.Add("Naam", string.Concat(customer.BackupContactPerson.Firstname, " ", customer.BackupContactPerson.Lastname));
            _backupContactInformation.Add("E-mailadres", customer.BackupContactPerson.Email);
            _backupContactInformation.Add("Telefoonnummer", customer.BackupContactPerson.Phonenumber);
        }
        
        
    }
}
