@page "/customer/list"
@layout MainLayout
@namespace Shared
@using customer
@inject ICustomerService customerService
@attribute [Authorize]

<div class="context-menu">
    <Label Text="Toevoegen" />
    <Button Text="Klant" Href="/customer/add" />
</div>
<div class="three-column-layout">
    <div class="one-third">
        <Title Text="Filteropties" />
        <div style="display: flex; justify-content: space-between;">
            <Button Text="Reset" OnClick="() => UpdateSearchValue()" />
            <Button Text="Filteren" />
        </div>

        <Searchbar PlaceHolder="Geef een zoekterm in" @bind-Text=SearchValue />

        <div class="reset-area">
            <div class="filterbuttonarea">
                <p>Type: </p>
                <Button Text="Intern" OnClick="@FilterIntern" Toggle=@toggleIntern />
                <Button Text="Extern" OnClick="@FilterExtern" Toggle=@toggleExtern />
            </div>
        </div>
    </div>
    <div class="two-thirds">
        <Title Text="Alle klanten" />
        <div class="two-columns-container">
            <div>
                @foreach (var customer in customers.Take(10))
                {
                    <EntityCard Value="@customer.Name" Active="@true" Href=@string.Concat("customer/", customer.Id)></EntityCard>
                }
            </div>
            <div>
                @foreach (var customer in customers.Skip(10).Take(10))
                {
                    <EntityCard Value="@customer.Name" Active="@true" Href=@string.Concat("customer/", customer.Id)></EntityCard>
                }
            </div>

        </div>
        <PageSelector OnClick="@ClickHandler" NumberOfPages=@totalPages SelectedPage="@selectedPage" />

    </div>
</div>

@code {

    public string SearchValue { get; set; }
    private IEnumerable<CustomerDto.Index>? customers;
    int offset = 0;
    int totalCustomers = 0;
    int totalPages = 0;
    int selectedPage = 1;
    string CustomerType = "";
    bool toggleIntern = false;
    bool toggleExtern = false;

    private void FilterIntern()
    {
        toggleIntern = !toggleIntern;
    }

    private void FilterExtern()
    {
        toggleExtern = !toggleExtern;
    }

    private void UpdateSearchValue()
    {
        Console.WriteLine("UPDATED UPDATED");
        SearchValue = "";
        StateHasChanged();
    }

    private void ResetFilter()
    {
        toggleIntern = false;
        toggleExtern = false;
        Console.WriteLine(SearchValue);
        SearchValue = "";
    }

    protected override async Task OnInitializedAsync()
    {
        customers = await customerService.GetIndexAsync(offset);
        totalCustomers = await customerService.GetCount();
        totalPages = (totalCustomers / 20) + 1;
    }

    async Task ClickHandler(int pageNr)
    {
        offset = (pageNr - 1) * 20;
        customers = await customerService.GetIndexAsync(offset);
        selectedPage = pageNr;
    }
}
