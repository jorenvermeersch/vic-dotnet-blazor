@using System.ComponentModel.DataAnnotations;
@namespace Shared
@using customer
@page "/customer/add"
@layout NoGlobalSearchLayout
@attribute [Authorize(Roles = "Master, Administrator")]
@inject ICustomerService customerService
@inject NavigationManager Navigation

<PageTitle>Klant Toevoegen</PageTitle>



<EditForm @ref="editForm" Model="@customerModel">
    <div class="context-menu">
        <span class="context-menu-label">Klant toevoegen</span>
        <Button Text="Toevoegen" OnClick="@HandleValidSubmit"/>
    </div>
    <DataAnnotationsValidator/>
    <div class="three-column-layout">
        <div class="one-third">
            <Title Text="Algemene informatie" />
            <AddInput Type="@Input.InputType.SELECT" Label="Type van klant" Required="@true" Items="@_typesClient" @bind-Value="@customerModel.TypeCustomer" For="@(() => customerModel.Institude)" />
            @if (customerModel.TypeCustomer == "Intern")
            {

                <AddInput Type="@Input.InputType.SELECT" Label="Instituut" Required="@true" Items="@_institution" @bind-Value="customerModel.Institude" For="@(() => customerModel.Institude)" />
                <AddInput Type="@Input.InputType.TEXT" Label="Departement" Required="@true" @bind-Value="customerModel.Department" For="@(() => customerModel.Department)" />
                <AddInput Type="@Input.InputType.TEXT" Label="Opleiding" Required="@false" @bind-Value="customerModel.Education" For="@(() => customerModel.Education)" />
            }
            else if (customerModel.TypeCustomer == "Extern")
            {
                <AddInput PlaceHolder="" Type="@Input.InputType.TEXT" Label="Type extern" Required="@true" @bind-Value="@customerModel.Type" For="@(() => customerModel.Type)" />
                <AddInput Type="@Input.InputType.TEXT" Label="Naam" Required="@true" @bind-Value="customerModel.Name" For="@(() => customerModel.Name)" />
            }
        </div>
        <div class="one-third">
            <Title Text="Contactgegevens" />
            <AddInput Type="@Input.InputType.TEXT" Label="Voornaam" Required="@true" @bind-Value="@customerModel.Firstname" For="@(() => customerModel.Firstname)" />
            <AddInput Type="@Input.InputType.TEXT" Label="Naam" Required="@true" @bind-Value="@customerModel.Lastname" For="@(() => customerModel.Lastname)" />
            <AddInput Type="@Input.InputType.TEXT" Label="E-mailadres" Required="@true" @bind-Value="@customerModel.Email" For="@(() => customerModel.Email)" />
            <AddInput Type="@Input.InputType.TEXT" Label="Telefoonnummer" @bind-Value="@customerModel.Phonenumber" For="@(() => customerModel.Phonenumber)" />
        </div>
        <div class="one-third">
            <Title Text="Back-up contactgegevens" />
            <AddInput Type="@Input.InputType.TEXT" Label="Voornaam" Required="@_backuprequired" Action="(value) => Makerequired(value)" OptionalId="0" @bind-Value="@customerModel.BackupFirstname" For="@(() => customerModel.BackupFirstname)" />
            <AddInput Type="@Input.InputType.TEXT" Label="Naam" Required="@_backuprequired" Action="(value) => Makerequired(value)" OptionalId="1" @bind-Value="@customerModel.BackupLastname" For="@(() => customerModel.BackupLastname)" />
            <AddInput Type="@Input.InputType.TEXT" Label="E-mailadres" Required="@_backuprequired" Action="(value) => Makerequired(value)" OptionalId="2" @bind-Value="@customerModel.BackupEmail" For="@(() => customerModel.BackupEmail)" />
            <AddInput Type="@Input.InputType.TEXT" Label="Telefoonnummer" @bind-Value="@customerModel.BackupPhonenumber" For="@(() => customerModel.BackupPhonenumber)" />
        </div>
    </div>
</EditForm>


@code {


    private Customer customerModel = new();
    private EditForm? editForm { get; set; }
    private List<string> _typesClient = new() { "Extern", "Intern" };
    private List<string> _institution = new() {"Hogent", "EhB"};

    private string _customcss = "background-color: white";

    private bool _backuprequired = false;

    private string[] _values = new string[3] { "", "", "" };


    public void Makerequired(string value) {
        int index = int.Parse(value.Substring(0, 1));
        string txt = value.Substring(1);
        _values[index] = txt;

        _backuprequired = _values.All(e => (e == "" || e == null)) ? false : true;
    }

    private async void HandleValidSubmit(){
        CustomerDto.Details customer = new();
        if(editForm.EditContext.Validate()){
            customer.ContactPerson = new ContactPersonDto()
                {
                    Firstname = customerModel.Firstname,
                    Lastname = customerModel.Lastname,
                    Email = customerModel.Email,
                    Phonenumber = customerModel.Phonenumber,
                };
            customer.BackupContactPerson = new ContactPersonDto()
                {
                    Firstname = customerModel.BackupFirstname,
                    Lastname = customerModel.BackupLastname,
                    Email = customerModel.BackupEmail,
                    Phonenumber = customerModel.BackupPhonenumber,
                };
            customer.Education = customerModel.Education;
            customer.Department = customerModel.Department;
            customer.Institution = customerModel.Institude;
            customer.Type = customerModel.Type;
            customer.Name = customerModel.Name;
            

            CustomerDto.Details newCustomer = await customerService.Add(customer);
            Navigation.NavigateTo("/customer/" + newCustomer.Id);


        }

    }

    public class Customer
    {

        [Required]
        public string TypeCustomer { get; set; }
        public string Name { get; set; }
        public string Type { get; set; }
        public string Education { get; set; }
        public string Department { get; set; }
        public string Institude { get; set; }

        [Required]
        public string Firstname { get; set; }
        [Required]
        public string Lastname { get; set; }
        [Required]
        public string Phonenumber { get; set; }
        [Required]
        public string Email { get; set; }

        public string BackupFirstname { get; set; }
        public string BackupLastname { get; set; }
        public string BackupPhonenumber { get; set; }
        public string BackupEmail { get; set; }
    }

}

