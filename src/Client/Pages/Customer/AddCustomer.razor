@using System.ComponentModel.DataAnnotations;
@namespace Shared
@using customer
@page "/customer/add"
@layout NoGlobalSearchLayout
@attribute [Authorize(Roles = "Master, Administrator")]
@inject ICustomerService customerService
@inject NavigationManager Navigation

<PageTitle>Klant Toevoegen</PageTitle>



 <EditForm @ref="Editform" Model="@Customer">
    <div class="context-menu">
        <button type="submit">Toevoegen</button>
    </div>
    <DataAnnotationsValidator/>
    <div class="three-column-layout">
        <div class="one-third">
            <Title Text="Algemene informatie" />
            <AddInput Type="@Input.InputType.SELECT" Label="Type van klant" Required="@true" Items="@_typesClient" @bind-Value="@Customer.CustomerType" For="@(() => Customer.CustomerType)" />
            @if (Customer.CustomerType == "Intern")
            {

                <AddInput Type="@Input.InputType.SELECT" Label="Instituut" Required="@true" Items="@_institution" @bind-Value="Customer.Institution" For="@(() => Customer.Institution)" />
                <AddInput Type="@Input.InputType.TEXT" Label="Departement" Required="@true" @bind-Value="Customer.Department" For="@(() => Customer.Department)" />
                <AddInput Type="@Input.InputType.TEXT" Label="Opleiding" Required="@false" @bind-Value="Customer.Education" For="@(() => Customer.Education)" />
            }
            else if (Customer.CustomerType == "Extern")
            {
                <AddInput PlaceHolder="" Type="@Input.InputType.TEXT" Label="Type extern" Required="@true" @bind-Value="Customer.Type" For="@(() => Customer.Type)" />
                <AddInput Type="@Input.InputType.TEXT" Label="Naam" Required="@true" @bind-Value="Customer.Name" For="@(() => Customer.Name)" />
            }
        </div>
      <div class="one-third">
            <Title Text="Contactgegevens" />
            <AddInput Type="@Input.InputType.TEXT" Label="Voornaam" Required="@true" @bind-Value="Customer.ContactPerson.Firstname" For="@(() => Customer.ContactPerson.Firstname)" />
            <AddInput Type="@Input.InputType.TEXT" Label="Naam" Required="@true" @bind-Value="Customer.ContactPerson.Lastname" For="@(() => Customer.ContactPerson.Lastname)" />
            <AddInput Type="@Input.InputType.TEXT" Label="E-mailadres" Required="@true" @bind-Value="Customer.ContactPerson.Email" For="@(() => Customer.ContactPerson.Email)" />
            <AddInput Type="@Input.InputType.TEXT" Label="Telefoonnummer" @bind-Value="Customer.ContactPerson.Phonenumber" For="@(() => Customer.ContactPerson.Phonenumber)" />
        </div>
        <div class="one-third">
            <Title Text="Back-up contactgegevens" />
            <AddInput Type="@Input.InputType.TEXT" Label="Voornaam" Required="@_backuprequired" Action="(value) => Makerequired(value)" OptionalId="0" @bind-Value="@Customer.BackupContactPerson.Firstname" For="@(() => Customer.BackupContactPerson.Firstname)" />
            <AddInput Type="@Input.InputType.TEXT" Label="Naam" Required="@_backuprequired" Action="(value) => Makerequired(value)" OptionalId="1" @bind-Value="@Customer.BackupContactPerson.Lastname" For="@(() => Customer.BackupContactPerson.Lastname)" />
            <AddInput Type="@Input.InputType.TEXT" Label="E-mailadres" Required="@_backuprequired" Action="(value) => Makerequired(value)" OptionalId="2" @bind-Value="@Customer.BackupContactPerson.Email" For="@(() => Customer.BackupContactPerson.Email)" />
            <AddInput Type="@Input.InputType.TEXT" Label="Telefoonnummer" @bind-Value="@Customer.BackupContactPerson.Phonenumber" For="@(() => Customer.BackupContactPerson.Phonenumber)" />

        </div>
    </div>
</EditForm>


@code {


    private CustomerDto.Details Customer { get; set; } = new();
    private EditForm? Editform { get; set; } = new();
    private List<string> _typesClient = new() { "Extern", "Intern" };
    private List<string> _institution = new() {"Hogent", "EhB"};

    private string _customcss = "background-color: white";

    private bool _backuprequired = false;

    private string[] _values = new string[3] { "", "", "" };


    public void Makerequired(string value) {
            int index = int.Parse(value.Substring(0, 1));
            string txt = value.Substring(1);
            _values[index] = txt;

            _backuprequired = _values.All(e => (e == "" || e == null)) ? false : true;
    }

        private async void HandleValidSubmit()
        {
            if (Editform.EditContext.Validate())
            {
                CustomerDto.Details newCustomer = await customerService.Add(Customer);
                Navigation.NavigateTo("/customer/" + newCustomer.Id);


            }

        }
}

