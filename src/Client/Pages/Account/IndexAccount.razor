@page "/account/list"
@layout MainLayout
@namespace Shared
@using Account
@inject IAccountService accountService
@attribute [Authorize]

<div class="context-menu">
    <AuthorizeView Roles="Master">
        <Label Text="Toevoegen" />
        <Button Text="Account" Href="/account/add" />
    </AuthorizeView>
</div>
<div class="three-column-layout">
    <div class="one-third">
        <Title Text="Filteropties" />
        <div style="display: flex; justify-content: space-between;">
            @*<Button Text="Reset" OnClick="() => UpdateSearchValue()" />*@
            <Button Text="Filteren" />
        </div>

        <Searchbar PlaceHolder="Geef een zoekterm in" @bind-Text=SearchValue />

        <div class="reset-area">
            <div class="filterbuttonarea">
                @*<p>Rol: </p>
                <Button Text="Master" OnClick="@FilterIntern" Toggle=@toggleIntern />
                <Button Text="Admin" OnClick="@FilterIntern" Toggle=@toggleIntern />
                <Button Text="Waarnemer" OnClick="@FilterExtern" Toggle=@toggleExtern />*@
            </div>
        </div>
    </div>
    <div class="two-thirds">
        <Title Text="Alle accounts" />
        <div class="two-columns-container">
            <div>
                @foreach (var account in accounts.Take(10))
                {
                    <EntityCard Value="@string.Concat(account.Firstname, " ", account.Lastname)" Active="@account.IsActive" Href=@string.Concat("account/", account.Id)></EntityCard>
                }
            </div>
            <div>
                @foreach (var account in accounts.Skip(10).Take(10))
                {
                    <EntityCard Value="@string.Concat(account.Firstname, " ", account.Lastname)" Active="@account.IsActive" Href=@string.Concat("account/", account.Id)></EntityCard>
                }
            </div>

        </div>
        <PageSelector OnClick="@ClickHandler" NumberOfPages=@totalPages SelectedPage="@selectedPage" />

    </div>
</div>

@code {

    public string SearchValue { get; set; }
    private IEnumerable<AccountDto.Index>? accounts;
    int offset = 0;
    int totalaccounts = 0;
    int totalPages = 0;
    int selectedPage = 1;


    protected override async Task OnInitializedAsync()
    {
        accounts = await accountService.GetIndexAsync(offset);
        totalaccounts = accounts.Count();
        totalPages = (totalaccounts / 20) + 1;
    }

    async Task ClickHandler(int pageNr)
    {
        offset = (pageNr - 1) * 20;
        accounts = await accountService.GetIndexAsync(offset);
        selectedPage = pageNr;
    }
}
