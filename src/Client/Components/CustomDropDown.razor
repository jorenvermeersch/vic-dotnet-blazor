<div>
    <div class="input-container">
        <label for="">
            @Label:
        </label>
        <div class="dropdown">
            <button type="button" class="drop-down-button" @onclick="ToggleDropDown">@DropDownChosenItem</button>
            <div class="drop-down-items" style=@style>
                <input placeholder="Zoeken..." @oninput="showValidItems"/>
                @foreach (var item in filteredItems)
                {
                    <button type="button" class="drop-down-button-item" onclick="@(() => OptionChosen(item.Key, item.Value))">@item.Key</button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private Dictionary<string, string> filteredItems = new();

    [Parameter]
    public Dictionary<string, string> Items { get; set; } = default!;

    [Parameter]
    public EventCallback<string> Action { get; set; } = default!;

    [Parameter]
    public string Label { get; set; } = "";

    private string _dropDownChosenItem = "Kies...";

    public string DropDownChosenItem 
    {
        get => shown ? "Menu sluiten" : _dropDownChosenItem; 
        set => _dropDownChosenItem = value; 
    
    } 

    private bool shown = false;
    private string style = "display: none";

    protected override void OnInitialized()
    {
        filteredItems = Items;
    }

    private void ToggleDropDown()
    {
        shown = !shown;
        style = shown ? "display: block" : "display: none";
    }

    private async void OptionChosen(string chosenOptionKey, string chosenOptionValue)
    {
        ToggleDropDown();
        DropDownChosenItem = chosenOptionKey;
        await Action.InvokeAsync(chosenOptionValue);
    }

    private void showValidItems(ChangeEventArgs args)
    {
        filteredItems = new();
        foreach (var item in Items)
        {
            if (item.Key.ToLower().Contains(args.Value.ToString().ToLower()))
            {
                filteredItems.Add(item.Key, item.Value); 
            }
        }
    }
}
